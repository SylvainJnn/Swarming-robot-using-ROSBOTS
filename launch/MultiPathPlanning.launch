<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="rosbot_pro" default="false" />
  <arg name="use_gazebo" default="false" />

  <include file="$(find rosbot_gazebo)/launch/maze_world.launch" />
   <param name="use_sim_time" value="true" />


  <node pkg="rviz" type="rviz" name="rviz"/>


  <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard" output="screen"/>


  <node unless="$(arg use_gazebo)" pkg="tf" type="static_transform_publisher" name="laser_broadcaster" args="0 0 0 3.14 0 0 base_link laser 100" />
  
  <rosparam command="load" file="$(find joint_state_controller)/joint_state_controller.yaml" />
  <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="joint_state_controller" />

  <node unless="$(arg use_gazebo)" pkg="tf" type="static_transform_publisher" name="transform2rosbot1" args="0 0 0 3.14 0 0 base_link /rosbot2_tf/base_link 100" />

  <node unless="$(arg use_gazebo)" pkg="tf" type="static_transform_publisher" name="transform2rosbot2" args="0 0 0 3.14 0 0 base_link /rosbot1_tf/base_link 100" />
   



<!-- ============ -->
<!-- First Rosbot -->
<!-- ============ -->

<group ns="rosbot1">

  <param name="tf_prefix" value="robot1_tf" />

  <param name="robot_description" command="$(find xacro)/xacro '$(find rosbot_description)/urdf/rosbot.xacro'"/>
  <node name="rosbot_spawn1" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model rosbot1" >
     
  </node>
  <node name="rosbot_state_publisher_1" pkg="robot_state_publisher" type="robot_state_publisher"/>


  <node pkg="gmapping" type="slam_gmapping" name="gmapping">
    <param name="base_frame" value="base_link"/>
    <param name="odom_frame" value="odom" />
    <param name="delta_2" value="0.1" />
  </node>


  <node pkg="move_base" type="move_base" name="move_base" output="screen">
    <param name="controller_frequency" value="10.0"/>
    <rosparam file="$(find tutorial_pkg)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find tutorial_pkg)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find tutorial_pkg)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find tutorial_pkg)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find tutorial_pkg)/config/trajectory_planner.yaml" command="load" />
  </node>

</group>


<!-- ============= -->
<!-- Second Rosbot -->
<!-- ============= -->

<group ns="rosbot2">

  <param name="tf_prefix" value="robot2_tf" />

  <param name="robot_description" command="$(find xacro)/xacro '$(find rosbot_description)/urdf/rosbot.xacro'"/>
  <node name="rosbot_spawn2" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model rosbot2 -x -2 -y -4 " >
     
  </node>
  <node name="rosbot_state_publisher_2" pkg="robot_state_publisher" type="robot_state_publisher"/>




  <node pkg="gmapping" type="slam_gmapping" name="gmapping">
    <param name="base_frame" value="base_link"/>
    <param name="odom_frame" value="odom" />
    <param name="delta_2" value="0.1" />
  </node>

  <node pkg="move_base" type="move_base" name="move_base" output="screen">
    <param name="controller_frequency" value="10.0"/>
    <rosparam file="$(find tutorial_pkg)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find tutorial_pkg)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find tutorial_pkg)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find tutorial_pkg)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find tutorial_pkg)/config/trajectory_planner.yaml" command="load" />
  </node>

</group>



<!-- Import of the map -->
  <node pkg="explore_lite" type="explore" respawn="true" name="explore" output="screen">
    <rosparam file="$(find tutorial_pkg)/config/exploration.yaml" command="load" />
  </node>
  -->

  <include file="$(find tutorial_pkg)/launch/map_server.launch"/>

  <include file="$(find tutorial_pkg)/launch/amcl_only.launch"/>

</launch>
